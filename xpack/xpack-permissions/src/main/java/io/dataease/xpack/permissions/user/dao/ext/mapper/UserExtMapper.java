package io.dataease.xpack.permissions.user.dao.ext.mapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.baomidou.mybatisplus.core.metadata.IPage;import io.dataease.api.permissions.user.vo.UserFormVO;import io.dataease.api.permissions.user.vo.UserGridRoleItem;import io.dataease.api.permissions.user.vo.UserGridVO;import io.dataease.api.permissions.user.vo.UserItem;import io.dataease.xpack.permissions.user.dao.ext.entity.UserInfoPO;import org.apache.ibatis.annotations.*;import java.util.List;@Mapperpublic interface UserExtMapper extends BaseMapper<UserGridVO> {    @Select(            """                         select distinct                     u.id,u.id as union_id, u.account, u.name, u.email, u.enable, u.create_time                     from per_user u                    left join per_user_role pur on pur.uid = u.id                    ${ew.customSqlSegment}                     """    )    @Results({            @Result(property = "roleItems", many = @Many(select = "roles"), column = "union_id")    })    IPage<UserGridVO> pager(IPage<UserGridVO> page, @Param("ew") QueryWrapper queryWrapper);    @Select(            """                    select pro.id, pro.name                     from per_user pu                     left join per_user_role pur on pur.uid = pu.id                     left join per_role pro on pro.id = pur.rid                     where pu.id = #{uId}                     """    )    List<UserGridRoleItem> roles(@Param("uId") Long uId);    @Select("select rid from per_user_role where uid = #{uid} and oid = #{oid}")    List<String> roleIds(@Param("uid") Long uid, @Param("oid") Long oid);    @Select("select id, id as union_id, #{oId} as oid, account, name, email, phone_prefix, phone, enable from per_user where id = #{uId} ")    @Results({            @Result(property = "roleIds", many = @Many(select = "roleIds"), column = "{uid=union_id, oid=oid}")    })    UserFormVO queryForm(@Param("uId") Long uId, @Param("oId") Long oId);    @Select(            """                   <script>                   select pu.id, pu.name                   from per_user pu                   left join per_user_role pur on pur.uid = pu.id                   WHERE pur.oid = #{oid}                    <if test="keyword != null and keyword != ''">                   and pu.name like concat('%', #{keyword}, '%')                    </if>                   and not exists (select 1 from per_user_role pur1 where pur1.rid = #{rid} and  pu.id = pur1.uid )                   </script>                    """    )    List<UserItem> optionForRole(@Param("oid") Long oid, @Param("rid") Long rid, @Param("keyword") String keyword);    @Select(            """                    select pu.id, pu.name                     from per_user pu                     left join per_user_role pur on pur.uid = pu.id                      ${ew.customSqlSegment}                     """    )    List<UserItem> selectedForRole(@Param("ew") QueryWrapper queryWrapper);    @Delete("delete from per_user_role pur where pur.uid = #{uId} and pur.oid = #{oId} ")    int deleteUserRoleMapping(@Param("uId") Long uId, @Param("oId") Long oId);    @Select("select count(*) as rcount from per_user_role pur where pur.uid = #{uId}")    int userRoleMappingCount(@Param("uId") Long uId);    @Update("update per_user set default_oid = #{oId} where id = #{uId}")    int switchOrg(@Param("uId") Long uId, @Param("oId") Long oId);    @Select("select id, name, default_oid as oid, language from per_user where id = #{uId}")    UserInfoPO userInfo(@Param("uId") Long uId);    @Delete("delete from per_user pu where not exists (select 1 from per_user_role pur where pur.uid = pu.id)")    void deleteByEmptyRole();    @Select("select id from per_user where default_oid = #{oid}")    List<Long> uidsByOid(@Param("oid") Long oid);    @Select("select pr.org_id from per_user_role pur left join per_role pr on pr.id = pur.rid where pur.uid = #{uid} order by pur.create_time limit 0, 1")    Long newDefaultOid(@Param("uid") Long uid);    @Select("select id from per_org order by create_time limit 0, 1")    Long newDefaultOidForAdmin();    @Update("update per_user set default_oid = #{oid} where id = #{uid}")    void updateDefaultOid(@Param("uid") Long uid, @Param("oid") Long oid);}