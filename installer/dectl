#!/bin/bash
action=$1
target=$2

DE_BASE=/opt
DE_RUNNING_BASE=${DE_BASE}/dataease2.0
DE_PORT=8100
DE_APISIX_BASE=$DE_RUNNING_BASE/apisix
need_init_apisix=false
set -a
source ${DE_RUNNING_BASE}/.env
set +a
export COMPOSE_HTTP_TIMEOUT=180

compose_files="-f docker-compose.yml"

compose_cmd="docker-compose"

docker-compose version >/dev/null 2>&1
if [ $? -ne 0 ]; then
   docker compose version >/dev/null 2>&1
   if [ $? -ne 0 ]; then
      compose_cmd="docker compose"
   fi
fi

if [[ ! ${DE_EXTERNAL_MYSQL} ]] || [ "${DE_EXTERNAL_MYSQL}" = "false" ]; then
  compose_files="${compose_files} -f docker-compose-mysql.yml"
fi

function usage() {
   echo "DATAEASE 控制脚本"
   echo
   echo "Usage: "
   echo "  ./dectl [COMMAND] [ARGS...]"
   echo "  ./dectl --help"
   echo
   echo "Commands: "
   echo "  status       查看 DATAEASE 服务运行状态"
   echo "  start        启动 DATAEASE 服务"
   echo "  stop         停止 DATAEASE 服务"
   echo "  restart      重启 DATAEASE 服务"
   echo "  reload       重新加载 DATAEASE 服务"
   echo "  upgrade      升级 DATAEASE 服务"
   echo "  clear-images 清理 DATAEASE 旧版本的相关镜像"
   echo "  version      查看 DATAEASE 版本"
}
function _check_apisix_init() {
   if [[ $DE_INSTALL_MODE = "enterprise" ]];then
      _prepare_apisix
   fi
}
function _prepare_apisix() {
   if [[ -z $DE_APISIX_KEY ]];then
      need_init_apisix=true
      DE_APISIX_KEY=$(uuidgen | sed 's/-//g')
      export DE_APISIX_KEY=$DE_APISIX_KEY
      cd $DE_RUNNING_BASE || exit
      env | grep DE_ >.env
      sed -i -e "s/DE_APISIX_KEY/${DE_APISIX_KEY}/g" $DE_RUNNING_BASE/apisix/apisix_conf/config.yaml
      sed -i -e "s/key:.*/key: ${DE_APISIX_KEY}/g" $DE_RUNNING_BASE/conf/application.yml
   fi
   compose_files="${compose_files} -f docker-compose-apisix.yml"
}
function _init_apisix() {
   DE_APISIX_KEY=$DE_APISIX_KEY sh $DE_RUNNING_BASE/bin/apisix/init.sh
}

function _healthcheck() {
   echo
   for b in {1..30}
   do
      sleep 3
      http_code=$(curl -sILw "%{http_code}\n" http://localhost:${DE_PORT} -o /dev/null)
      if [[ $http_code == 000 ]];then
         echo "DataEase 服务状态 : 正在启动"
      elif [[ $http_code == 200 ]];then
         echo "DataEase 服务状态 : 正常运行"
         break;
      else
         echo -e "DataEase 服务状态 : \033[31m无法访问\033[0m"
         exit 1
      fi
   done
   echo
}
function status() {
   echo
   echo "DataEase 容器运行状态"
   _check_apisix_init
   cd ${DE_RUNNING_BASE} || exit; ${compose_cmd} ${compose_files} ps

   echo
   docker_root_dir=$(docker info | grep "Docker Root Dir"  | awk -F': ' '{print $2}')
   echo "Docker 目录及文件大小 : "
   du -sh $docker_root_dir
   echo
   echo "Docker 目录所在磁盘使用情况 : "
   df -H $docker_root_dir

   echo
   echo "日志文件大小 : "
   du -Sh ${DE_RUNNING_BASE}/logs/

   echo
   echo "DataEase 运行目录及文件大小 : "
   du -sh ${DE_BASE}
   echo
   echo "DataEase 运行目录使用情况 : "
   df -H ${DE_BASE}

   _healthcheck
}
function start() {
   echo
   _check_apisix_init
   cd ${DE_RUNNING_BASE} || exit; ${compose_cmd} ${compose_files} up -d
   _healthcheck
   if [ $? -eq 0 ] && [[ $need_init_apisix = true ]]; then
      _init_apisix
   fi
}
function stop() {
   echo
   _check_apisix_init
   cd ${DE_RUNNING_BASE} || exit; ${compose_cmd} ${compose_files} down -v ${target}
}
function restart() {
   stop
   start
}
function reload() {
   start
}
function version() {
   echo
   de_version=$(grep "^    image:.*/dataease2.0:" ${DE_RUNNING_BASE}/docker-compose.yml | awk -F'dataease2.0:' '{print $2}')
   echo $de_version
}
function upgrade() {
   echo
   cd ${DE_RUNNING_BASE} || exit; ${compose_cmd} ${compose_files} pull dataease
   reload
}
function _clear_component_docker_images() {
   component=$1
   compose_file=$DE_RUNNING_BASE/docker-compose-${component}.yml
   if [ $1 = "dataease2.0" ];then
      compose_file=$DE_RUNNING_BASE/docker-compose.yml
   fi
   component_image_defined=$(grep "^    image:.*/$component:" ${compose_file} | uniq)
   component_version=$(echo ${component_image_defined} | awk -F"${component}:" '{print $2}' | uniq)
   component_image=$(echo ${component_image_defined} | awk -F'image: ' '{print $2}' | awk -F':' '{print $1}')

   if test -z $(docker images | grep "dataease" | grep "$component_image" | grep -v " $component_version "); then
      echo "$component_image 不存在旧版本镜像"
   else
      echo "清理${component}镜像"
      docker rmi $(docker images | grep "dataease" | grep "$component_image" | grep -v " $component_version " | awk -F' ' '{print $1":"$2}')
      echo "清理完毕"
   fi
}
function clear_images() {
   echo
   _clear_component_docker_images 'dataease2.0'
   _clear_component_docker_images 'mysql'
   if test ! -z "$(docker images -f dangling=true -q)"; then
      echo "清理虚悬镜像"
      docker rmi $(docker images -f dangling=true -q)
      echo "清理完毕"
   fi
}
function main() {
    case "${action}" in
      status)
         status
         ;;
      start)
         start
         ;;
      stop)
         stop
         ;;
      restart)
         restart
         ;;
      reload)
         reload
         ;;
      upgrade)
         upgrade
         ;;
      clear-images)
         clear_images
         ;;
      version)
         version
         ;;
      help)
         usage
         ;;
      --help)
         usage
         ;;
      *)
         echo "不支持的参数，请使用 help 或 --help 参数获取帮助"
         ;;
    esac
}
main